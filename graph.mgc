int dfs(int v, int[][] p, bool[] visited)
    if visited[v]
        return 0
    visited[v] = true
    for i in p[v]
        dfs(i, p, visited)
    return 0

n = readInt()
m = readInt()

v = [[]]*n #ZLE

for i in [0:m]
    a = readInt()
    b = readInt()

    v[a] += b
    v[b] += a

visited = [false]*n

components = 0

for i in [0:n]
    if (visited[i] == false)
        components += 1
        dfs(i, v, visited)

printInt(components)
